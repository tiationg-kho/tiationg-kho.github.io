<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Backtracking on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/backtracking/</link><description>Recent content in Backtracking on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/backtracking/index.xml" rel="self" type="application/rss+xml"/><item><title>Backtracking</title><link>https://tiationg-kho.github.io/blog/2024/06/13/backtracking/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/backtracking/</guid><description> Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems backtracking intro backtracking like dfs on a tree if a problem need try and error (make decisions) to enum every res, then use backtracking making decisions each round we got multi choices (must pick one) each round we choose sth or not choose notice elements are duplicate or unique if so, we need to take care of pruning notice elements can be chosen repeatedly or not if not, we need to maintain a memo notice that inside backtracking, we can use the boolean value as a return value to indicate whether there is a valid answer or not def backtrack(res, path, count, visited, index/node): if BOUND_REACHED: if GOAL_REACHED: RECORD_RESULT return for CHOCIE in CHOICES: if CHOICE is VALID: MAKE_CHOICE backtrack(res, path, count, visited, index/node) UNDO_CHOICE pattern subset a subset is composed of none or some or all elements from a set permutation a permutation is an ordered selection of a certain number of elements from a set combination a combination is an unordered selection of a certain number of elements from a set backtracking with constraints make choices and backtrack based on certain constraints or conditions</description></item></channel></rss>