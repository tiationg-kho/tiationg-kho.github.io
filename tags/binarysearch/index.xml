<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BinarySearch on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/binarysearch/</link><description>Recent content in BinarySearch on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/binarysearch/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary Search</title><link>https://tiationg-kho.github.io/blog/2024/06/13/binary-search/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/binary-search/</guid><description>Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems binary search intro # approach 1 # search in a sorted array for specific val # or search in sth’s range class Solution: def binary_search(self, nums, TARGET): left, right, boundary = 0, len(nums) - 1, - 1 while left &amp;lt;= right: m = (left + right) // 2 if nums[m] &amp;gt; TARGET: right = m - 1 elif nums[m] == TARGET: boundary = m break else: left = m + 1 return boundary # approach 2 # search in a sorted array for most close val to specific val # or search in sth’s range class Solution: def binary_search(self, nums, LIMIT): left, right, boundary = LOW_BOUND, UP_BOUND, - 1 def valid(PARAMETERS): SOME OPS DUE TO LIMIT return BOOL while left &amp;lt;= right: m = (left + right) // 2 if valid(m): boundary = m right = m - 1 # or left = m + 1 else: left = m + 1 # or right = m - 1 return boundary an efficient sorted array search algorithm can search for specific val can search for most close val to specific val can make a binary decision to shrink the search range time O(log(n)), space O(1) left and right can be a range from sorted array’s start and end sth’s low_bound and up_bound use a boundary (ptr) to record the current best/valid answer, then try to get better one pattern search in a sorted array for specific val</description></item></channel></rss>