<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BitManipulation on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/bitmanipulation/</link><description>Recent content in BitManipulation on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/bitmanipulation/index.xml" rel="self" type="application/rss+xml"/><item><title>Bit Manipulation</title><link>https://tiationg-kho.github.io/blog/2024/06/13/bit-manipulation/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/bit-manipulation/</guid><description>Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems bit manipulation intro # bitmasking # start from: mask = 0 # checking: mask &amp;amp; 1&amp;lt;&amp;lt;k == 0, if equals 0 means not mask 1&amp;lt;&amp;lt;k yet # masking: mask = mask | 1&amp;lt;&amp;lt;k # notice: we can also use &amp;#34;mask = mask ^ 1&amp;lt;&amp;lt;k&amp;#34; to mask for different purpose (toggle) mask = 0 bin(mask) # 0b0 mask &amp;amp; 1&amp;lt;&amp;lt;3 # 0 mask |= 1&amp;lt;&amp;lt;3 # 8 bin(mask) # 0b1000 mask &amp;amp; 1&amp;lt;&amp;lt;3 # 8 mask &amp;amp; 1&amp;lt;&amp;lt;5 # 0 # xor 5 ^ 5 # 0 5 ^ 5 ^ 3 # 3 # shift &amp;gt;&amp;gt; &amp;lt;&amp;lt; # not ~ # turn int number to 4-byte string (length = 4) # 256 == 8 bits == 1 byte bin(0xff) # &amp;#39;0b11111111&amp;#39; def int_to_string(val): byte_array = [(val &amp;gt;&amp;gt; (i * 8)) &amp;amp; 0xFF for i in range(4)][::- 1] char_array = [chr(byte) for byte in byte_array] string = &amp;#39;&amp;#39;.</description></item></channel></rss>