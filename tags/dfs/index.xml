<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DFS on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/dfs/</link><description>Recent content in DFS on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/dfs/index.xml" rel="self" type="application/rss+xml"/><item><title>Tree</title><link>https://tiationg-kho.github.io/blog/2024/06/13/tree/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/tree/</guid><description>Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems tree intro tree properties
tree is a special graph with properties that connected acyclic non-direction edges one path between any two vertices/nodes important tree concepts traversal of the tree depth/height of tree tree and its subtree tree node’s degree types of node root internal vs leaf parent vs child vs sibling root vs left boundary vs right boundary vs leaf predecessor vs successor lowest common ancestor (LCA) of two nodes types of tree binary tree every node has at most 2 children (left and right) binary search tree (BST) for each node nodes in left subtree have smaller keys nodes in right subtree have larger keys inorder traversal res is an ascending sorted list height-balanced binary tree depth of the subtrees of every node never differs by more than 1 perfect binary tree every internal node has exactly 2 child nodes every leaf nodes are at the same level complete binary tree every level is completely filled besides last level nodes in last level align left typically used in implementing heap full/strictly binary tree every node has exactly 0 or 2 children how to define tree node</description></item><item><title>Graph</title><link>https://tiationg-kho.github.io/blog/2024/06/13/graph/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/graph/</guid><description>Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems graph intro A graph is most commonly stored as a hashmap/list of adjacency lists/sets: for each vertex, store a list/set of its neighbors how to build graph is important often use elements inside set can be tuples graph = defaultdict(set) notice: tree is a special graph with properties that connected acyclic non-direction edges one path between any two vertices/nodes graph dfs pattern DFS time O(|V| + |E|) space O(|V|) for visited hashset, and recursion stack (not counting building graph) DFS is better at searching for long paths memorizing res for long paths detecting cycles # dfs graph = defaultdict(set) for p, q in edges: graph[p].</description></item></channel></rss>