<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hashmap on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/hashmap/</link><description>Recent content in Hashmap on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/hashmap/index.xml" rel="self" type="application/rss+xml"/><item><title>Hashmap</title><link>https://tiationg-kho.github.io/blog/2024/06/13/hashmap/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/hashmap/</guid><description>Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems hashmap intro Complexity search/add/delete in O(1) Implementation Array (we can think as lots of buckets) using a hash function to count key put that keyâ€™s value in that index Hash Collision Issue (when hash function told us to put in same idx) Solution Separate Chaining use linked list to store key-value pairs at that index Open Addressing find the next unused space adding 2-choice hashing use two hash functions still one hash table will decrease the number of hash collisions is useful for Rabin Karp (string pattern searching) Concept can reflect some map relation store key-value pairs key must be hashable if the number of keys is limited, can use array to simulate hashmap if we want to push and pop at same time, make sure to push first then pop, to avoid the issue when the push element is equal to the pop element pattern separate chaining</description></item></channel></rss>