<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SegmentTree on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/segmenttree/</link><description>Recent content in SegmentTree on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/segmenttree/index.xml" rel="self" type="application/rss+xml"/><item><title>Segment Tree</title><link>https://tiationg-kho.github.io/blog/2024/06/13/segment-tree/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/segment-tree/</guid><description>Starred by 25+ users, GitHub Repo: LeetCode Pattern 500 offers:
500 solutions for LeetCode problems in Python and Java 17 notes on essential concepts related to data structures and algorithms 130 patterns for solving LeetCode problems segment tree intro Aspect Prefix Sum Difference Array Segment Tree Primary Purpose range sum queries range updates range queries, and range updates Operation Time Sum Query: O(1) Update: O(1) Query: O(logC) or O(logn); Update: O(logC) or O(logn) Reconstruction get original array from diff of elements get original array from prefix sum of elements N/A Use Case static arrays cumulative updates interval-based manipulations segment tree is a tree where each node is an interval tree based is more easy to understand build tree O(n) or use dynamic build, only build node when update() and query(), cost O(logC) (C is max val of num we assign) point modify O(logC) or O(logn) range query O(logC) or O(logn) sum count max other related aggregations range modify O(logC) if using lazy propagation can have multiple lazy variables depends on how many operations need push_down(), push_up(), update(), query() will be implemented differently depends on the diff type of range query and range modify # sum type # non dynamic build # non range modification # non lazy propagation class Node: def __init__(self, start, end): self.</description></item></channel></rss>