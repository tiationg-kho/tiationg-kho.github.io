<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/spring/</link><description>Recent content in Spring on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 00:08:22 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Framework</title><link>https://tiationg-kho.github.io/blog/2024/06/13/spring-framework/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/spring-framework/</guid><description>Spring Framework The Spring Framework is an open-source framework for building Java applications Core Concepts Inversion of Control (IoC) Dependency Injection (DI) Bean Inversion of Control (IoC) Container Aspect-Oriented Programming (AOP)</description></item><item><title>Inversion of Control (IoC)</title><link>https://tiationg-kho.github.io/blog/2024/06/13/inversion-of-control-ioc/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/inversion-of-control-ioc/</guid><description>Inversion of Control (IoC) IoC is a software design principle that decouples components and shifts control over program execution from the main application to a container Pros Components are loosely coupled</description></item><item><title>Dependency Injection (DI)</title><link>https://tiationg-kho.github.io/blog/2024/06/13/dependency-injection-di/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/dependency-injection-di/</guid><description>Dependency Injection (DI) DI is one of the primary ways to implement IoC Through DI, components receive their dependencies from IoC container rather than creating them themselves Type Constructor Injection Method Injection Property Injection</description></item><item><title>Bean</title><link>https://tiationg-kho.github.io/blog/2024/06/13/bean/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/bean/</guid><description>Bean A bean is a Java object managed by the Spring IoC container Bean Definition Type XML Configuration Define beans in applicationContext.xml Annotation-Based Configuration Define beans by using annotations like @Component on classes Java Configuration Defines beans in @Configuration classes and @Bean methods Bean Scope Singleton (Default) eg. logging service Prototype eg. order processor Request eg. user preferences Session eg. shopping cart Application eg. cache WebSocket eg. order tracking</description></item><item><title>Inversion of Control (IoC) Container</title><link>https://tiationg-kho.github.io/blog/2024/06/13/inversion-of-control-ioc-container/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/inversion-of-control-ioc-container/</guid><description>Inversion of Control (IoC) Container IoC container in Spring manages the creation and lifecycle of application objects (beans) and their dependencies Type BeanFactory ApplicationContext Extends BeanFactory with more enterprise-specific functionality</description></item><item><title>Aspect-Oriented Programming (AOP)</title><link>https://tiationg-kho.github.io/blog/2024/06/13/aspect-oriented-programming-aop/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/aspect-oriented-programming-aop/</guid><description>Aspect-Oriented Programming (AOP) AOP in Spring allows you to separate cross-cutting concerns from your application logic eg. transaction management, logging, security, exception Use @Aspect with @Component on class can create a aspect bean @Before(”pointcut”) on method let this method execute before pointcut methods @After(”pointcut”) on method let this method execute after pointcut methods</description></item><item><title>@SpringBootApplication</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@springbootapplication/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@springbootapplication/</guid><description>@SpringBootApplication @SpringBootApplication on main class as an entry point @SpringBootApplication public class SpringLearningApplication { public static void main(String[] args) { SpringApplication.run(SpringLearningApplication.class, args); } } @RestController class MyController { @GetMapping(&amp;#34;/&amp;#34;) public String hello(){ return &amp;#34;hello&amp;#34;; } }</description></item><item><title>@Autowired</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@autowired/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@autowired/</guid><description>@Autowired @Autowired is used for automatic dependency injection in Spring. It can be applied to constructors, methods, and fields
@Component public class MyService { @Autowired private MyRepository myRepository; } Use @Autowired with @Qualifier can specify which implementation to inject
Use @Primary with @Component can set that implementation as default bean</description></item><item><title>@PostConstruct</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@postconstruct/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@postconstruct/</guid><description>@PostConstruct @PostConstruct allows to perform initialization tasks on a bean right after all its necessary dependencies have been injected by Spring but before the bean is put to use The method annotated with @PostConstruct must have no parameters, return void, and be public</description></item><item><title>@Value</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@value/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@value/</guid><description>@Value @Value(”${key:default}”) on variable can get key-value pair’s value from application.properties</description></item><item><title>@RestController, @Service, @Repository, @Component</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@restcontroller-@service-@repository-@component/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@restcontroller-@service-@repository-@component/</guid><description>@RestController, @Service, @Repository, @Component Presentation Layer
@RestController Marks a class as a Spring MVC controller Service Layer
@Service Marks a class as a service layer component for defining business logic Persistence Layer
@Repository
With Spring Data JPA, marks a interface as a data access layer component @Repository public interface AuthorRepository extends JpaRepository&amp;lt;Author, Long&amp;gt; { } Generic Component
@Component Marks a class as a generic Spring-managed component with no specific layer role</description></item><item><title>Request Mapping</title><link>https://tiationg-kho.github.io/blog/2024/06/13/request-mapping/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/request-mapping/</guid><description>Request Mapping @GetMapping
@GetMapping(&amp;#34;/users&amp;#34;) public ResponseEntity&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; getUsers() { List&amp;lt;User&amp;gt; users = // Fetch users return ResponseEntity.ok(users); } @PostMapping
@PostMapping(&amp;#34;/users&amp;#34;) public ResponseEntity&amp;lt;User&amp;gt; createUser(@RequestBody User user) { User createdUser = // Create user return ResponseEntity.status(HttpStatus.CREATED).body(createdUser); } @PutMapping
@PutMapping(&amp;#34;/users/{id}&amp;#34;) public ResponseEntity&amp;lt;User&amp;gt; updateUser(@PathVariable(&amp;#34;id&amp;#34;) Long id, @RequestBody User user) { User updatedUser = // Update user return ResponseEntity.ok(updatedUser); } @DeleteMapping
@DeleteMapping(&amp;#34;/users/{id}&amp;#34;) public ResponseEntity&amp;lt;Void&amp;gt; deleteUser(@PathVariable(&amp;#34;id&amp;#34;) Long id) { // Delete user return ResponseEntity.noContent().build(); }</description></item><item><title>Data Binding, Validation</title><link>https://tiationg-kho.github.io/blog/2024/06/13/data-binding-validation/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/data-binding-validation/</guid><description>Data Binding, Validation Data Binding
@RequestParam
@GetMapping(&amp;#34;/search&amp;#34;) public List&amp;lt;Item&amp;gt; searchItems( @RequestParam(name = &amp;#34;query&amp;#34;) String query, @RequestParam(name = &amp;#34;page&amp;#34;, required = false, defaultValue = &amp;#34;0&amp;#34;) int page, @RequestParam(name = &amp;#34;size&amp;#34;, required = false, defaultValue = &amp;#34;10&amp;#34;) int size, @RequestParam(name = &amp;#34;sort&amp;#34;, required = false, defaultValue = &amp;#34;asc&amp;#34;) String sort) { return itemService.search(query, page, size, sort); } @RequestBody
@PostMapping(&amp;#34;/users&amp;#34;) public ResponseEntity&amp;lt;User&amp;gt; createUser(@RequestBody User user) { User createdUser = // Create user return ResponseEntity.</description></item><item><title>Object-Relational Mapping (ORM)</title><link>https://tiationg-kho.github.io/blog/2024/06/13/object-relational-mapping-orm/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/object-relational-mapping-orm/</guid><description>Object-Relational Mapping (ORM) ORM provides the foundational concept for mapping objects to relational databases Java Persistence API (JPA) standardizes ORM in Java, defining a set of rules and interfaces Hibernate implements JPA, offering the actual tools and functionalities for ORM Spring Data JPA builds on JPA and Hibernate, making it easier to implement data access layers with minimal configuration and code @Entity on POJO
@Data @NoArgsConstructor @Entity @Table(name = &amp;#34;authors&amp;#34;) public class Author { @Id @GeneratedValue(strategy = GenerationType.</description></item><item><title>Lombak</title><link>https://tiationg-kho.github.io/blog/2024/06/13/lombak/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/lombak/</guid><description>Lombak @Data annotation on POJO to generate boilerplate code such as getters, setters, toString, equals, and hashCode methods</description></item><item><title>Authentication, Authorization</title><link>https://tiationg-kho.github.io/blog/2024/06/13/authentication-authorization/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/authentication-authorization/</guid><description>Authentication, Authorization Authentication The process of verifying the identity of a user Authorization The process of verifying what an authenticated user is allowed to do</description></item><item><title>@CrossOrigin</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@crossorigin/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@crossorigin/</guid><description>@CrossOrigin @CrossOrigin enable CORS request on whole controller or certain methods</description></item><item><title>Exception Handling</title><link>https://tiationg-kho.github.io/blog/2024/06/13/exception-handling/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/exception-handling/</guid><description>Exception Handling @ControllerAdvice
Used on a class to make it a global exception handler @ExceptionHandler Used on methods within a @ControllerAdvice class to define the HTTP response for specific exceptions @ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; handleGenericExceptions(Exception ex) { Map&amp;lt;String, String&amp;gt; response = new HashMap&amp;lt;&amp;gt;(); response.put(&amp;#34;message&amp;#34;, ex.getMessage()); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response); } }</description></item><item><title>Interceptor</title><link>https://tiationg-kho.github.io/blog/2024/06/13/interceptor/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/interceptor/</guid><description>Interceptor Interceptors in Spring allow you to intercept HTTP requests and responses Step Create a class which implement the HandlerInterceptor interface
@Component public class MyInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(&amp;#34;PreHandle method is Calling&amp;#34;); return true; } } Register the interceptor with Spring&amp;rsquo;s InterceptorRegistry
@Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private MyInterceptor myInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { registry.</description></item><item><title>@Transactional</title><link>https://tiationg-kho.github.io/blog/2024/06/13/@transactional/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/@transactional/</guid><description>@Transactional @Transactional on method means that the entire method will run in a single transaction. If any exception occurs during the execution of this method, the transaction will be rolled back, ensuring data consistency</description></item><item><title>Consume REST Services</title><link>https://tiationg-kho.github.io/blog/2024/06/13/consume-rest-services/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/consume-rest-services/</guid><description>Consume REST Services RestTemplate Synchronous client WebClient Asynchronous client, part of Spring WebFlux FeignClient Synchronous and declarative client, part of Spring Cloud</description></item></channel></rss>