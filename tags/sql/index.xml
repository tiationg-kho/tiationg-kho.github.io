<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL on Tiationg's Portfolio</title><link>https://tiationg-kho.github.io/tags/sql/</link><description>Recent content in SQL on Tiationg's Portfolio</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 23 Jun 2024 00:05:27 -0700</lastBuildDate><atom:link href="https://tiationg-kho.github.io/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>CAP Theorem</title><link>https://tiationg-kho.github.io/blog/2024/06/13/cap-theorem/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/cap-theorem/</guid><description>CAP Theorem CAP Theorem is a fundamental principle in distributed systems that addresses the trade-offs involved in building distributed databases CP system (eg. banking system) AP system (eg. e-commerce App) Consistency Every read reflects the most recent write or an error Availability Every request gets a non-error response, without guarantee of it being the latest Partition Tolerance System continues to work regardless of losing network connectivity between nodes</description></item><item><title>SQL Database vs NoSQL Database</title><link>https://tiationg-kho.github.io/blog/2024/06/13/sql-database-vs-nosql-database/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/sql-database-vs-nosql-database/</guid><description>SQL Database vs NoSQL Database SQL Database Suitable for applications requiring a fixed schema Support complex queries Strict data integrity ACID properties Atomicity A transaction is all-or-nothing Consistency Database remains in valid state before and after a transaction Isolation Transactions do not affect each other Durability Committed transactions are saved permanently NoSQL Database Suitable for applications with changing requirements Store and query unstructured or semi-structured data Handle high volumes of data and traffic BASE properties Basically Available System guarantees availability Soft State System&amp;rsquo;s state is not fixed Eventually Consistent System will become consistent over time Type Key-Value Pair eg.</description></item><item><title>Transaction</title><link>https://tiationg-kho.github.io/blog/2024/06/13/transaction/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/transaction/</guid><description>Transaction A sequence of one or more operations performed as a single logical unit of work Modes to handle transaction in SQL Server Autocommit (default) Each individual statement is considered a transaction Implicit SQL Server starts the transaction for you Must configure SET IMPLICIT_TRANSACTIONS ON; Must call COMMIT; at the end of transaction Explicit Fully control over when a transaction starts and ends Must call BEGIN TRANSACTION; at the start of transaction Must call COMMIT; at the end of transaction</description></item><item><title>Entity Relationship</title><link>https://tiationg-kho.github.io/blog/2024/06/13/entity-relationship/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/entity-relationship/</guid><description>Entity Relationship One-to-One Relationship where a record in one table is linked to exactly one record in another table eg. each student has a unique locker One-to-Many Relationship where a single record in one table can be associated with one or more records in another table eg. each student belongs to exactly one department, but a department can have many students Many-to-Many Relationship where many records in one table are associated with many records in another table Typically implemented using a conjunction table that contains foreign keys linking to the primary keys of the two tables involved The conjunction tableâ€™s primary key is a composite key eg.</description></item><item><title>Entity Relationship Diagram</title><link>https://tiationg-kho.github.io/blog/2024/06/13/entity-relationship-diagram/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/entity-relationship-diagram/</guid><description>Entity Relationship Diagram An Entity Relationship Diagram (ERD) is a type of flowchart that illustrates how entities relate to each other within a system</description></item><item><title>Normalization</title><link>https://tiationg-kho.github.io/blog/2024/06/13/normalization/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/normalization/</guid><description>Normalization Normalization is a database design technique Normalization vs Denormalization Normalization Will divide large tables into smaller and related tables Reduce redundancy Improve data integrity Denormalization Improve read performance by reducing join operations Will combining smaller tables into larger ones Step 1NF (First Normal Form) Atomic Each cell must only contain a single value Each column name must be unique Each row must be unique 2NF (Second Normal Form) No partial dependency 3NF (Third Normal Form) No transitive dependency</description></item><item><title>Constraint</title><link>https://tiationg-kho.github.io/blog/2024/06/13/constraint/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/constraint/</guid><description>Constraint PRIMARY EKY Constraint
A unique identifier (single col or composite cols) for a record in a database table Maintain ****entity integrity Automatically creates a clustered index Identity column is commonly used for primary key Auto-Incrementing Uniqueness and Not Null No Manual Insertion FOREIGN KEY Constraint
Identifies a link between two tables Maintain referential integrity Referential Action ON DELETE CERTAIN_ACTION Determines the action for child row when parent row got deleted Action Description CASCADE Deletes child rows if the parent row is deleted SET NULL Sets child keys to NULL if the parent row is delete SET DEFAULT Sets child keys to their default value if the parent row is deleted NO ACTION 1.</description></item><item><title>WHERE vs HAVING</title><link>https://tiationg-kho.github.io/blog/2024/06/13/where-vs-having/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/where-vs-having/</guid><description>WHERE vs HAVING WHERE HAVING Filter individual rows based on conditions involving column values Filter groups of rows based on conditions involving aggregated values Must used after GROUP BY Contain aggregate function Used in SELECT, UPDATE, or DELETE statements Used in SELECT statements</description></item><item><title>DROP vs TRUNCATE vs DELETE</title><link>https://tiationg-kho.github.io/blog/2024/06/13/drop-vs-truncate-vs-delete/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/drop-vs-truncate-vs-delete/</guid><description>DROP vs TRUNCATE vs DELETE DROP TRUNCATE DELETE Remove an entire object from the database 1. Remove all rows from a table without logging individual row deletions or firing triggers. 2. Identity sequence reset to its seed value Remove specific rows from a table based on a condition DDL DDL DML Can be rollback DROP TABLE comments; TRUNCATE TABLE comments; DELETE FROM comments WHERE commentID = 2;</description></item><item><title>Join vs Subquery</title><link>https://tiationg-kho.github.io/blog/2024/06/13/join-vs-subquery/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/join-vs-subquery/</guid><description>Join vs Subquery JOIN Subquery JOIN is combining rows from two or more tables based on related columns A subquery is a SELECT query that is nested within another DML statement Generally, joins are highly optimized Generally, correlated subquery is slow</description></item><item><title>Stored Procedure vs Function</title><link>https://tiationg-kho.github.io/blog/2024/06/13/stored-procedure-vs-function/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/stored-procedure-vs-function/</guid><description>Stored Procedure vs Function Feature Stored Procedure Function Usage Use for complex processing (involve DML, transaction and exception handling) Use for computations Database Modifications Yes (INSERT, UPDATE, DELETE) No Syntax Use EXEC to run Used in SELECT statement Parameters Input, output, input/output Input only Return Type 1. Without RETURN, automatically implicit return a scalar value. 2. With RETURN, return a scalar value. 3. Without RETURN, use SELECT to return a result set Must return a value, which can be a scalar value or a table value Call each other Can call function Cannot call stored procedure Stored Procedure CREATE PROCEDURE UpdateUserEmail @UserID INT, @NewEmail VARCHAR(255) AS BEGIN UPDATE Users SET Email = @NewEmail WHERE ID = @UserID; END; GO EXEC UpdateUserEmail @UserID = 1, @NewEmail = &amp;#39;newemail@example.</description></item><item><title>Isolation Level</title><link>https://tiationg-kho.github.io/blog/2024/06/13/isolation-level/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/isolation-level/</guid><description>Isolation Level Isolation level refers to the degree to which a transaction is isolated from modifications made by other transactions eg. SET TRANSACTION ISOLATION LEVEL REPEATABLE READ; Concurrency problem in SQL database Dirty Reads Reading uncommitted changes Lost Update Concurrent updates overwrite each other Non-repeatable Reads Different results from the same query in a transaction Phantom Reads New rows appear in a query&amp;rsquo;s results within the same transaction Isolation Level Dirty Reads Lost Update Non-repeatable Reads Phantom Reads Description READ UNCOMMITTED O O O O Allow reading uncommitted data READ COMMITTED X O O O 1.</description></item><item><title>Create Database And Tables And Insert Data</title><link>https://tiationg-kho.github.io/blog/2024/06/13/create-database-and-tables-and-insert-data/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/create-database-and-tables-and-insert-data/</guid><description>Create Database And Tables And Insert Data -- Create Database CREATE DATABASE MyDb; GO -- Specify Database USE MyDb; GO -- Create Table CREATE TABLE Departments ( ID INT IDENTITY(1,1) PRIMARY KEY, FullName VARCHAR(255) NOT NULL ); GO -- Create Table CREATE TABLE Students ( ID INT IDENTITY(1,1) PRIMARY KEY, DepartmentID INT FOREIGN KEY REFERENCES Departments(ID), Email VARCHAR(255) UNIQUE, FullName VARCHAR(255) NOT NULL, Age INT CHECK(Age &amp;gt;= 18), AdmissionDate DATE DEFAULT GETDATE() ); GO -- Insert data into Departments INSERT INTO Departments (FullName) VALUES (&amp;#39;Computer Science&amp;#39;); INSERT INTO Departments (FullName) VALUES (&amp;#39;Mathematics&amp;#39;); INSERT INTO Departments (FullName) VALUES (&amp;#39;Physics&amp;#39;); GO -- Insert data into Students INSERT INTO Students (DepartmentID, Email, FullName, Age) VALUES (1, &amp;#39;john.</description></item><item><title>Update Data In Table</title><link>https://tiationg-kho.github.io/blog/2024/06/13/update-data-in-table/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/update-data-in-table/</guid><description>Update Data In Table UPDATE posts SET title = &amp;#39;Updated First Post&amp;#39; WHERE postID = 1; 627. Swap Salary /* Write your T-SQL query statement below */ UPDATE Salary SET sex = CASE sex WHEN &amp;#39;m&amp;#39; THEN &amp;#39;f&amp;#39; ELSE &amp;#39;m&amp;#39; END;</description></item><item><title>Delete Data In Table</title><link>https://tiationg-kho.github.io/blog/2024/06/13/delete-data-in-table/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/delete-data-in-table/</guid><description>Delete Data In Table -- without a join DELETE FROM comments WHERE commentID = 2; -- with a join DELETE comments FROM comments INNER JOIN posts ON comments.postID = posts.postID WHERE posts.title = &amp;#39;First Post&amp;#39;; 196. Delete Duplicate Emails /* Write your T-SQL query statement below */ WITH cte AS ( SELECT email, MIN(id) AS [id] FROM Person GROUP BY email ) DELETE FROM Person WHERE id NOT IN (SELECT id FROM cte);</description></item><item><title>SELECT Execution Order</title><link>https://tiationg-kho.github.io/blog/2024/06/13/select-execution-order/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/select-execution-order/</guid><description>SELECT Execution Order 6. SELECT col, aggregate_func(col), windwo_func(col) OVER (PARTITION BY col ORDER BY col) 1. FROM table1 2. JOIN table2 ON table1.col1 = table2.col2 3. WHERE condition 4. GROUP BY col 5. HAVING condition 7. ORDER BY col --- 1. FROM -&amp;gt; 2. JOIN ON -&amp;gt; 3. WHERE -&amp;gt; 4. GROUP BY -&amp;gt; 5. HAVING 6. SELECT -&amp;gt; 7. DISTINCT 8. ORDER BY -&amp;gt; 9. `TOP` or `OFFSET n ROWS FETCH NEXT m ROWS ONLY`</description></item><item><title>Query Without Duplicate Rows</title><link>https://tiationg-kho.github.io/blog/2024/06/13/query-without-duplicate-rows/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/query-without-duplicate-rows/</guid><description>Query Without Duplicate Rows SELECT DISTINCT col_name FROM table_name; SELECT DISTINCT column1, column2, column3 FROM table_name; SELECT COUNT(DISTINCT col_name) FROM table_name; DISTINCT Only get the unique values Can be used with multiple columns COUNT(DISTINCT col) Counts all unique non-null values in the specified column 1141. User Activity for the Past 30 Days I /* Write your T-SQL query statement below */ SELECT activity_date AS [day], COUNT(DISTINCT user_id) AS active_users FROM Activity WHERE activity_date &amp;gt; &amp;#39;2019-06-27&amp;#39; AND activity_date &amp;lt;= &amp;#39;2019-07-27&amp;#39; GROUP BY activity_date; 1148.</description></item><item><title>Filtering Rows Based On Conditions</title><link>https://tiationg-kho.github.io/blog/2024/06/13/filtering-rows-based-on-conditions/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/filtering-rows-based-on-conditions/</guid><description>Filtering Rows Based On Conditions SELECT col_name FROM table_name WHERE condition; -- condition can use `AND`, `OR`, `NOT`, `()` SELECT col_name FROM table_name WHERE col_name IN (val_list); -- or sub_query -- or `NOT IN` SELECT col_name FROM table_name WHERE EXISTS (sub_query); -- or `NOT EXISTS` SELECT col_name FROM table_name WHERE col_name BETWEEN lower_bound AND upper_bound; SELECT col_name FROM table_name WHERE col_name LIKE &amp;#39;PatternWithWildcards&amp;#39;; Wildcard _ wildcard is used to represent exactly one character.</description></item><item><title>Sorting Results</title><link>https://tiationg-kho.github.io/blog/2024/06/13/sorting-results/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/sorting-results/</guid><description>Sorting Results SELECT * FROM table_name ORDER BY col_name ASC; -- can use `ASC`, `DESC` SELECT column1, column2, column3 FROM table_name ORDER BY column1, column2 DESC, column3 ASC; -- ascending is the default sort order -- can `ORDER BY` multiple conditions 620. Not Boring Movies /* Write your T-SQL query statement below */ SELECT id, movie, [description], rating FROM Cinema WHERE [description] != &amp;#39;boring&amp;#39; AND id % 2 = 1 ORDER BY rating DESC;</description></item><item><title>Aggregate Function</title><link>https://tiationg-kho.github.io/blog/2024/06/13/aggregate-function/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/aggregate-function/</guid><description>Aggregate Function Perform a calculation on a set of values and return a single value SELECT AVG(col_name) FROM table_name -- we can use `AVG`, `MIN`, `MAX`, `SUM`, `COUNT` COUNT(*)
Counts the total number of rows in the result set, even if some of those rows contain only NULL values in all their columns Will returns 0 when used on an empty set COUNT(col)
It counts non-NULL values in that col Will returns 0 when used on an empty set AVG(col), MIN(col), MAX(col), SUM(col)</description></item><item><title>Grouping Rows With Same Values In Specified Columns</title><link>https://tiationg-kho.github.io/blog/2024/06/13/grouping-rows-with-same-values-in-specified-columns/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/grouping-rows-with-same-values-in-specified-columns/</guid><description>Grouping Rows With Same Values In Specified Columns SELECT col1_name, SUM(col2_name) FROM table_name GROUP BY col1_name; -- `GROUP BY` is used with aggregate functions to perform calculations on the grouped data -- every column in the SELECT clause must either be listed in the GROUP BY clause or be used within an aggregate function SELECT column1, column2, AVG(column3) FROM table_name GROUP BY column1, column2; -- can `GROUP BY` multiple cols 511.</description></item><item><title>Filtering Group Results</title><link>https://tiationg-kho.github.io/blog/2024/06/13/filtering-group-results/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/filtering-group-results/</guid><description>Filtering Group Results SELECT col1_name, SUM(col2_name) FROM table_name GROUP BY col1_name HAVING condition; -- the condition here will be involed the aggregate function -- eg. HAVING SUM(revenue) &amp;gt; 1500 182. Duplicate Emails /* Write your T-SQL query statement below */ SELECT email AS Email FROM Person GROUP BY email HAVING COUNT(*) &amp;gt; 1; 596. Classes More Than 5 Students /* Write your T-SQL query statement below */ SELECT class FROM Courses GROUP BY class HAVING COUNT(*) &amp;gt;= 5; 1050.</description></item><item><title>Combining Rows From Two Or More Tables Based On Related Columns</title><link>https://tiationg-kho.github.io/blog/2024/06/13/combining-rows-from-two-or-more-tables-based-on-related-columns/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/combining-rows-from-two-or-more-tables-based-on-related-columns/</guid><description>Combining Rows From Two Or More Tables Based On Related Columns JOIN is combining rows from two or more tables based on related columns Type of join LEFT JOIN (Left Outer Join) Returns all rows from the left table and matched rows from the right table, filling with NULL if there&amp;rsquo;s no match INNER JOIN / JOIN Returns matched rows in both tables RIGHT JOIN (Right Outer Join) Returns all rows from the right table and matched rows from the left table, filling with NULL if there&amp;rsquo;s no match FULL JOIN (Full Outer Join) Returns all rows, filling with NULL where there is no match CROSS JOIN Returns the Cartesian product of rows from the tables in the join Combining each row of the first table with each row of the second table SELF JOIN We can join a table to itself as if it were two separate tables SELECT * FROM table1_name LEFT JOIN table2_name ON table1_name.</description></item><item><title>Combine Or Exclude Result Sets</title><link>https://tiationg-kho.github.io/blog/2024/06/13/combine-or-exclude-result-sets/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/combine-or-exclude-result-sets/</guid><description>Combine Or Exclude Result Sets UNION Combines the result set of two or more SELECT statements Contain only distinct values Will sort the first col automatically UNION ALL Combines the result set of two or more SELECT statements Will includes duplicate values Can be used in recursive CTE SELECT col_name FROM table1_name UNION SELECT col_name FROM table2_name; -- combines the result set of two or more SELECT statements (only distinct values) -- must have the same number and same type of cols in the result sets SELECT col_name FROM table1_name UNION ALL SELECT col_name FROM table2_name; -- combines the result set of two or more SELECT statements (includes duplicates) -- must have the same number and same type of cols in the result sets SELECT col_name FROM table1_name INTERSECT SELECT col_name FROM table2_name; -- only distinct values SELECT col_name FROM table1_name EXCEPT SELECT col_name FROM table2_name; -- only distinct values 1795.</description></item><item><title>Subquery</title><link>https://tiationg-kho.github.io/blog/2024/06/13/subquery/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/subquery/</guid><description>Subquery A subquery is a SELECT query that is nested within another DML statement Subquery used in FROM clause is called Derived Table Simple subquery Simple subquery is independent of the outer query Simple subquery executed before the main query and provide results to the outer query Correlated subquery Correlated subquery references cols from the outer query Correlated subquery is executed for each row of the main query -- simple subquery SELECT s.</description></item><item><title>Common Table Expression (CTE)</title><link>https://tiationg-kho.github.io/blog/2024/06/13/common-table-expression-cte/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/common-table-expression-cte/</guid><description>Common Table Expression (CTE) A Common Table Expression (CTE) is a temporary result set in SQL Server that you can reference within a DML statement
Pros Improve readability Can be recursively defined WITH TotalSales AS ( SELECT salesperson_id, SUM(amount) AS total_amount FROM sales GROUP BY salesperson_id ) SELECT s.id, s.salesperson_id, s.amount, ts.total_amount FROM sales s JOIN TotalSales ts ON s.salesperson_id = ts.salesperson_id; Recursive CTE includes anchor member and recursive member</description></item><item><title>Window Function</title><link>https://tiationg-kho.github.io/blog/2024/06/13/window-function/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/window-function/</guid><description>Window Function Used to perform calculations across a set of rows related to the current row in a query Can use aggregate function SUM(col), AVG(col), COUNT(col), MIN(col), MAX(col) Can use ranking function ROW_NUMBER(), RANK(), DENSE_RANK(), LAG(col), LEAD(col) PARTITION BY Allows you to split the result set into smaller groups and apply the window function independently to each group Whether or not you need this clause depends on the requirement of the query If you want to apply a uniform window calculation across the entire result set, you don&amp;rsquo;t need it If you need to perform calculations group-wise, then you must use it ORDER BY Determines the order of data within the window Required for rank function SELECT id, salesperson_id, amount, SUM(amount) OVER (PARTITION BY salesperson_id) AS total_amount FROM sales; -- if you want to compute the average salary for each department SELECT department, AVG(salary) OVER (PARTITION BY department) FROM employees; -- if you want to compute the overall average salary for all employees SELECT department, AVG(salary) OVER () FROM employees; -- if you want to rank employees within each department by salary SELECT department, salary, ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) FROM employees; -- if you want to see the difference in salary between each employee and the prev when ranked by salary across the entire company -- `LAG` for getting previous row, `LEAD` for getting next row SELECT employee_name, salary, LAG(salary) OVER (ORDER BY salary DESC) FROM employees; -- combine `GROUP BY` with window funcction -- in this specific scenario, `PARTITION BY` is not necessary -- the reason is that the `GROUP BY` clause already ensures that the sum of SaleAmount is calculated per employee SELECT EmployeeID, SUM(SaleAmount) AS TotalSales, RANK() OVER(ORDER BY SUM(SaleAmount) DESC) AS SalesRank FROM EmployeeSales GROUP BY EmployeeID; 178.</description></item><item><title>Pagination</title><link>https://tiationg-kho.github.io/blog/2024/06/13/pagination/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/pagination/</guid><description>Pagination TOP Return a specified number of rows from the beginning of the result set Better used with ORDER BY Can be like TOP 5 or TOP 5 PERCENT OFFSET n ROWS FETCH NEXT m ROWS ONLY Skip a specific number of rows and then take a fixed number of rows following the skipped ones Must used with ORDER BY SELECT TOP 10 * FROM Person.Address; -- select first 10 rows from this table SELECT * FROM Person.</description></item><item><title>Conditional Logic</title><link>https://tiationg-kho.github.io/blog/2024/06/13/conditional-logic/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/conditional-logic/</guid><description>Conditional Logic SELECT name, [status], CASE [status] WHEN &amp;#39;active&amp;#39; THEN &amp;#39;Currently in use&amp;#39; WHEN &amp;#39;inactive&amp;#39; THEN &amp;#39;No longer in use&amp;#39; WHEN &amp;#39;pending&amp;#39; THEN &amp;#39;Awaiting approval&amp;#39; WHEN &amp;#39;obsolete&amp;#39; THEN &amp;#39;Outdated and not used&amp;#39; ELSE &amp;#39;Unknown status&amp;#39; END AS status_description FROM products; SELECT name, grade, CASE WHEN grade &amp;gt;= 90 THEN &amp;#39;A&amp;#39; WHEN grade &amp;gt;= 80 AND grade &amp;lt; 90 THEN &amp;#39;B&amp;#39; WHEN grade &amp;gt;= 70 AND grade &amp;lt; 80 THEN &amp;#39;C&amp;#39; WHEN grade &amp;gt;= 60 AND grade &amp;lt; 70 THEN &amp;#39;D&amp;#39; ELSE &amp;#39;F&amp;#39; END AS grade_letter FROM students; CASE col WHEN val THEN res_when_val_met ELSE res_when_val_not_met END CASE WHEN expression THEN value_if_true ELSE value_if_false END ISNULL(expression, replacement_value) 262.</description></item><item><title>Join Algorithm</title><link>https://tiationg-kho.github.io/blog/2024/06/13/join-algorithm/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/join-algorithm/</guid><description>Join Algorithm Nested Loops Join Merge Join Hash Join Definition For each row in the first table (outer loop), the database system searches through the second table (inner loop) to find matching rows Used when both input tables are sorted on the join key. The database engine reads through both tables simultaneously, like merging two sorted lists, and outputs matching pairs Building a hash table on the join key of one of the tables (usually the smaller one) and then scanning the other table to find matching rows by looking into the hash table Best Use Case Small datasets or when one table is much smaller than the other Large, sorted datasets Large, unsorted datasets Performance Can be slow for large datasets, but fast for small to medium datasets with indexes Very efficient if data is sorted on join columns Fast for large datasets, but requires more memory Memory Usage Low, since it processes one row at a time Moderate, depending on the size of the datasets High, due to the creation of a hash table</description></item><item><title>Index</title><link>https://tiationg-kho.github.io/blog/2024/06/13/index/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://tiationg-kho.github.io/blog/2024/06/13/index/</guid><description>Index Index is a structure that speeds up data searches Pros Faster data retrieval Efficient data sorting Cons Increase storage space Slower data modification operations B+ Tree is a common data structure used to implement index Non-leaf level Nodes contains key and pointers Leaf level Nodes contain the actual data records Nodes are linked together in a double linked list CLUSTERED INDEX vs NONCLUSTERED INDEX CLUSTERED INDEX A table can have only one clustered index Clustered index determines the physical order of data in a table eg.</description></item></channel></rss>